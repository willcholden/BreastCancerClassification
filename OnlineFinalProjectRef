{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Final Project\n",
    "\n",
    "## Predict whether a mammogram mass is benign or malignant\n",
    "\n",
    "We'll be using the \"mammographic masses\" public dataset from the UCI repository (source: https://archive.ics.uci.edu/ml/datasets/Mammographic+Mass)\n",
    "\n",
    "This data contains 961 instances of masses detected in mammograms, and contains the following attributes:\n",
    "\n",
    "\n",
    "   1. BI-RADS assessment: 1 to 5 (ordinal)  \n",
    "   2. Age: patient's age in years (integer)\n",
    "   3. Shape: mass shape: round=1 oval=2 lobular=3 irregular=4 (nominal)\n",
    "   4. Margin: mass margin: circumscribed=1 microlobulated=2 obscured=3 ill-defined=4 spiculated=5 (nominal)\n",
    "   5. Density: mass density high=1 iso=2 low=3 fat-containing=4 (ordinal)\n",
    "   6. Severity: benign=0 or malignant=1 (binominal)\n",
    "   \n",
    "BI-RADS is an assesment of how confident the severity classification is; it is not a \"predictive\" attribute and so we will discard it. The age, shape, margin, and density attributes are the features that we will build our model with, and \"severity\" is the classification we will attempt to predict based on those attributes.\n",
    "\n",
    "Although \"shape\" and \"margin\" are nominal data types, which sklearn typically doesn't deal with well, they are close enough to ordinal that we shouldn't just discard them. The \"shape\" for example is ordered increasingly from round to irregular.\n",
    "\n",
    "A lot of unnecessary anguish and surgery arises from false positives arising from mammogram results. If we can build a better way to interpret them through supervised machine learning, it could improve a lot of lives.\n",
    "\n",
    "## Your assignment\n",
    "\n",
    "Apply several different supervised machine learning techniques to this data set, and see which one yields the highest accuracy as measured with K-Fold cross validation (K=10). Apply:\n",
    "\n",
    "* Decision tree\n",
    "* Random forest\n",
    "* KNN\n",
    "* Naive Bayes\n",
    "* SVM\n",
    "* Logistic Regression\n",
    "* And, as a bonus challenge, a neural network using Keras.\n",
    "\n",
    "The data needs to be cleaned; many rows contain missing data, and there may be erroneous data identifiable as outliers as well.\n",
    "\n",
    "Remember some techniques such as SVM also require the input data to be normalized first.\n",
    "\n",
    "Many techniques also have \"hyperparameters\" that need to be tuned. Once you identify a promising approach, see if you can make it even better by tuning its hyperparameters."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Let's begin: prepare your data\n",
    "\n",
    "Start by importing the mammographic_masses.data.txt file into a Pandas dataframe (hint: use read_csv) and take a look at it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "mass = pd.read_csv('mammographic_masses.data.txt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>5</th>\n",
       "      <th>67</th>\n",
       "      <th>3</th>\n",
       "      <th>5.1</th>\n",
       "      <th>3.1</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4</td>\n",
       "      <td>43</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>?</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5</td>\n",
       "      <td>58</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4</td>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   5  67  3 5.1 3.1  1\n",
       "0  4  43  1   1   ?  1\n",
       "1  5  58  4   5   3  1\n",
       "2  4  28  1   1   3  0"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mass.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 960 entries, 0 to 959\n",
      "Data columns (total 6 columns):\n",
      " #   Column  Non-Null Count  Dtype \n",
      "---  ------  --------------  ----- \n",
      " 0   5       960 non-null    object\n",
      " 1   67      960 non-null    object\n",
      " 2   3       960 non-null    object\n",
      " 3   5.1     960 non-null    object\n",
      " 4   3.1     960 non-null    object\n",
      " 5   1       960 non-null    int64 \n",
      "dtypes: int64(1), object(5)\n",
      "memory usage: 45.1+ KB\n"
     ]
    }
   ],
   "source": [
    "mass.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Make sure you use the optional parmaters in read_csv to convert missing data (indicated by a ?) into NaN, and to add the appropriate column names (BI_RADS, age, shape, margin, density, and severity):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "mass = pd.read_csv('mammographic_masses.data.txt',\n",
    "                   na_values = ['?'],\n",
    "                   names = ['BI_RADS','age','shape','margin','density','severity'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Evaluate whether the data needs cleaning; your model is only as good as the data it's given. Hint: use describe() on the dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>BI_RADS</th>\n",
       "      <td>959.0</td>\n",
       "      <td>4.348279</td>\n",
       "      <td>1.783031</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>55.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>age</th>\n",
       "      <td>956.0</td>\n",
       "      <td>55.487448</td>\n",
       "      <td>14.480131</td>\n",
       "      <td>18.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>96.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>shape</th>\n",
       "      <td>930.0</td>\n",
       "      <td>2.721505</td>\n",
       "      <td>1.242792</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>margin</th>\n",
       "      <td>913.0</td>\n",
       "      <td>2.796276</td>\n",
       "      <td>1.566546</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>density</th>\n",
       "      <td>885.0</td>\n",
       "      <td>2.910734</td>\n",
       "      <td>0.380444</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>severity</th>\n",
       "      <td>961.0</td>\n",
       "      <td>0.463059</td>\n",
       "      <td>0.498893</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          count       mean        std   min   25%   50%   75%   max\n",
       "BI_RADS   959.0   4.348279   1.783031   0.0   4.0   4.0   5.0  55.0\n",
       "age       956.0  55.487448  14.480131  18.0  45.0  57.0  66.0  96.0\n",
       "shape     930.0   2.721505   1.242792   1.0   2.0   3.0   4.0   4.0\n",
       "margin    913.0   2.796276   1.566546   1.0   1.0   3.0   4.0   5.0\n",
       "density   885.0   2.910734   0.380444   1.0   3.0   3.0   3.0   4.0\n",
       "severity  961.0   0.463059   0.498893   0.0   0.0   0.0   1.0   1.0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mass.describe().transpose()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 961 entries, 0 to 960\n",
      "Data columns (total 6 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   BI_RADS   959 non-null    float64\n",
      " 1   age       956 non-null    float64\n",
      " 2   shape     930 non-null    float64\n",
      " 3   margin    913 non-null    float64\n",
      " 4   density   885 non-null    float64\n",
      " 5   severity  961 non-null    int64  \n",
      "dtypes: float64(5), int64(1)\n",
      "memory usage: 45.2 KB\n"
     ]
    }
   ],
   "source": [
    "mass.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    516\n",
       "1    445\n",
       "Name: severity, dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mass['severity'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are quite a few missing values in the data set. Before we just drop every row that's missing data, let's make sure we don't bias our data in doing so. Does there appear to be any sort of correlation to what sort of data has missing fields? If there were, we'd have to try and go back and fill that data in."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def percent_missing(df):\n",
    "    percent_nan = 100 * df.isnull().sum()/len(df)\n",
    "    percent_nan = percent_nan[percent_nan>0].sort_values()\n",
    "    return percent_nan"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, '% missing')"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "percent_nan = percent_missing(mass)\n",
    "sns.barplot(x=percent_nan.index,y=percent_nan)\n",
    "plt.ylabel('% missing')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>BI_RADS</th>\n",
       "      <th>age</th>\n",
       "      <th>shape</th>\n",
       "      <th>margin</th>\n",
       "      <th>density</th>\n",
       "      <th>severity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>74.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>4.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>4.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>5.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>778</th>\n",
       "      <td>4.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>819</th>\n",
       "      <td>4.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>824</th>\n",
       "      <td>6.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>884</th>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>923</th>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>130 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     BI_RADS   age  shape  margin  density  severity\n",
       "1        4.0  43.0    1.0     1.0      NaN         1\n",
       "4        5.0  74.0    1.0     5.0      NaN         1\n",
       "5        4.0  65.0    1.0     NaN      3.0         0\n",
       "6        4.0  70.0    NaN     NaN      3.0         0\n",
       "7        5.0  42.0    1.0     NaN      3.0         0\n",
       "..       ...   ...    ...     ...      ...       ...\n",
       "778      4.0  60.0    NaN     4.0      3.0         0\n",
       "819      4.0  35.0    3.0     NaN      2.0         0\n",
       "824      6.0  40.0    NaN     3.0      4.0         1\n",
       "884      5.0   NaN    4.0     4.0      3.0         1\n",
       "923      5.0   NaN    4.0     3.0      3.0         1\n",
       "\n",
       "[130 rows x 6 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mass[(mass['age'].isnull())|\n",
    "     (mass['shape'].isnull()) |\n",
    "     (mass['margin'].isnull()) |\n",
    "     (mass['density'].isnull())]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BI_RADS      2\n",
       "age          5\n",
       "shape       31\n",
       "margin      48\n",
       "density     76\n",
       "severity     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mass.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If the missing data seems randomly distributed, go ahead and drop rows with missing data. Hint: use dropna()."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "mass.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BI_RADS     0\n",
       "age         0\n",
       "shape       0\n",
       "margin      0\n",
       "density     0\n",
       "severity    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mass.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "Next you'll need to convert the Pandas dataframes into numpy arrays that can be used by scikit_learn. Create an array that extracts only the feature data we want to work with (age, shape, margin, and density) and another array that contains the classes (severity). You'll also need an array of the feature name labels."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = mass.drop(['severity','BI_RADS'],axis=1)\n",
    "y = mass['severity']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Some of our models require the input data to be normalized, so go ahead and normalize the attribute data. Hint: use preprocessing.StandardScaler()."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=101)\n",
    "\n",
    "scaler = StandardScaler()\n",
    "scaled_X_train = scaler.fit_transform(X_train)\n",
    "scaled_X_test = scaler.transform(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Decision Trees\n",
    "\n",
    "Before moving to K-Fold cross validation and random forests, start by creating a single train/test split of our data. Set aside 75% for training, and 25% for testing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# see above"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now create a DecisionTreeClassifier and fit it to your training data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(random_state=101)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dtc = DecisionTreeClassifier(random_state=101)\n",
    "dtc.fit(scaled_X_train,y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Display the resulting decision tree."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "dtc_pred = dtc.predict(scaled_X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Measure the accuracy of the resulting decision tree model using your test data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix,classification_report,plot_confusion_matrix,accuracy_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[81, 27],\n",
       "       [31, 69]])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confusion_matrix(y_test,dtc_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/tian/anaconda3/lib/python3.7/site-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n",
      "  warnings.warn(msg, category=FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x11c7f6a58>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_confusion_matrix(dtc,scaled_X_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.72      0.75      0.74       108\n",
      "           1       0.72      0.69      0.70       100\n",
      "\n",
      "    accuracy                           0.72       208\n",
      "   macro avg       0.72      0.72      0.72       208\n",
      "weighted avg       0.72      0.72      0.72       208\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test,dtc_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7211538461538461"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy_score(y_test,dtc_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.36889498, 0.09596899, 0.50018325, 0.03495278])"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dtc.feature_importances_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now instead of a single train/test split, use K-Fold cross validation to get a better measure of your model's accuracy (K=10). Hint: use model_selection.cross_val_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import cross_val_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "dtc_cv_scores = cross_val_score(dtc,scaled_X_train,y_train,scoring='accuracy',cv=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7266769073220687"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dtc_cv_scores.mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now try a RandomForestClassifier instead. Does it perform better?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7378648233486944"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rfc = RandomForestClassifier(n_estimators=64,max_features='auto',random_state=101)\n",
    "rfc_cv_scores = cross_val_score(rfc,scaled_X_train,y_train,scoring='accuracy',cv=10)\n",
    "rfc_cv_scores.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(n_estimators=64, random_state=101)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rfc.fit(scaled_X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7836538461538461"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy_score(y_test,rfc.predict(scaled_X_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Answer:\n",
    "\n",
    "Yes, RandomFroestClassifier performs better. We may try to use grid search to find out the a combination of hyperparameters to help improve the accuracy further."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_estimators=[64,100,128,200]\n",
    "max_features= [2,3,4]\n",
    "bootstrap = [True,False]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "param_grid = {'n_estimators':n_estimators,\n",
    "             'max_features':max_features,\n",
    "             'bootstrap':bootstrap} "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=10, estimator=RandomForestClassifier(),\n",
       "             param_grid={'bootstrap': [True, False], 'max_features': [2, 3, 4],\n",
       "                         'n_estimators': [64, 100, 128, 200]})"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rfc = RandomForestClassifier()\n",
    "rfc_grid = GridSearchCV(rfc,param_grid,cv=10)\n",
    "rfc_grid.fit(scaled_X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'bootstrap': True, 'max_features': 2, 'n_estimators': 64}"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rfc_grid.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "rfc_grid_pred = rfc_grid.predict(scaled_X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7836538461538461"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy_score(y_test,rfc_grid_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## SVM\n",
    "\n",
    "Next try using svm.SVC with a linear kernel. How does it compare to the decision tree?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.svm import SVC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.773399897593446"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svc = SVC(kernel='linear',C=1.0)\n",
    "svc_cv_scores = cross_val_score(svc,scaled_X_train,y_train,scoring='accuracy',cv=10)\n",
    "svc_cv_scores.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(kernel='linear')"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svc.fit(scaled_X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8413461538461539"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy_score(y_test,svc.predict(scaled_X_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Answer:\n",
    "\n",
    "SupportVectorMachines has better performance than the decision tree. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## KNN\n",
    "How about K-Nearest-Neighbors? Hint: use neighbors.KNeighborsClassifier - it's a lot easier than implementing KNN from scratch like we did earlier in the course. Start with a K of 10. K is an example of a hyperparameter - a parameter on the model itself which may need to be tuned for best results on your particular data set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "knn = KNeighborsClassifier()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Choosing K is tricky, so we can't discard KNN until we've tried different values of K. Write a for loop to run KNN with K values ranging from 1 to 50 and see if K makes a substantial difference. Make a note of the best performance you could get out of KNN."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "k_values = list(range(1,51))\n",
    "param_grid = {'knn__n_neighbors':k_values}\n",
    "\n",
    "operations = [('knn',knn)]\n",
    "\n",
    "from sklearn.pipeline import Pipeline\n",
    "pipe = Pipeline(operations)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "knn_grid = GridSearchCV(pipe,param_grid,cv=10,scoring='accuracy')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=10, estimator=Pipeline(steps=[('knn', KNeighborsClassifier())]),\n",
       "             param_grid={'knn__n_neighbors': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\n",
       "                                              12, 13, 14, 15, 16, 17, 18, 19,\n",
       "                                              20, 21, 22, 23, 24, 25, 26, 27,\n",
       "                                              28, 29, 30, ...]},\n",
       "             scoring='accuracy')"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn_grid.fit(scaled_X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pipeline(steps=[('knn', KNeighborsClassifier(n_neighbors=15))])"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn_grid.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.71374808, 0.70888377, 0.76351767, 0.74751664, 0.7796723 ,\n",
       "       0.76676907, 0.7780594 , 0.77647209, 0.77322069, 0.77007168,\n",
       "       0.77329749, 0.76367127, 0.78448541, 0.7781362 , 0.79096262,\n",
       "       0.77324629, 0.78937532, 0.78773682, 0.78294931, 0.7796979 ,\n",
       "       0.78771121, 0.77647209, 0.77168459, 0.76843318, 0.7781106 ,\n",
       "       0.7781106 , 0.7797235 , 0.77168459, 0.7765489 , 0.7764977 ,\n",
       "       0.77332309, 0.77332309, 0.77334869, 0.77012289, 0.77176139,\n",
       "       0.76853559, 0.7766001 , 0.7781874 , 0.77980031, 0.77980031,\n",
       "       0.77980031, 0.7781874 , 0.78783922, 0.78622632, 0.78783922,\n",
       "       0.78463902, 0.78622632, 0.78945212, 0.78461342, 0.78466462])"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn_grid.cv_results_['mean_test_score']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Accuracy')"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYgAAAEGCAYAAAB/+QKOAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/YYfK9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAxW0lEQVR4nO3deXxb5Zno8d8jebcT24njLI7JQkICgZBAGtZCgdKEaQsptCW002Wmd+jcof10GKCF3t6207kdWtJpe6fToaWdTttbBgoUAtNCAmUPaxKyE5I4CSF2FtvxLtmSJb33D0mOLB3JR46OLfs838+HD9bRkfweRdaj93neRYwxKKWUUsk8o90ApZRS+UkDhFJKKUsaIJRSSlnSAKGUUsqSBgillFKWCka7AblSU1NjZs+ePdrNUEqpMWXz5s2txpgpVveNmwAxe/ZsNm3aNNrNUEqpMUVEDqW7T1NMSimlLGmAUEopZUkDhFJKKUsaIJRSSlnSAKGUUsrSuBnFpPLP2i1NrFm/hyMdvcyoKuWOFQtYtbRutJullLJJA4RyxNotTdz16A56+8MANHX0ctejOwA0SCg1RmiKSTlizfo9A8Ehrrc/zJr1e0apRUqpbGmAUI440tGb1XGlVP7RFJNyxIyqUposgsGMqtK0j9GahXK7fPsb0B6EcsQdKxbg9cigY6WFXu5YscDy/HjNoqmjF8PJmsXaLU0j0FqlRl8+/g1ogFCOWLW0jhmVJQO366pKufv6c9J+G9KahXK7fPwb0BSTckQwFOF4V4ACj2CA52//AEUF6b+PaM1CuV0+/g1ogFCO2Hu8m2A4wpULa3nunWYOt/s5fUpF2vPT1SxKCr387vVD3PvC/pzkZfMtx6vyT7bvkVy8p4wxlBR6U3oQkLlu5zRNMSlH7GjqBODac2cA8G6rL+P5d6xYQElSD6PAI/T2h/nG2p05ycvmY45X5Zds3yO5ek/98uWD9PaHKUiq25UUetLW7UaCBgjliO2NnUwsKeCyM6L7kBwcIkCsWlrHX186Z+B2XVUpP/jEudROKE45d7h52XzM8ar8ku17JBfvqQ37Wrn7qd1cc/Y01nx8MXUJPYbrlswY1R6uppiUI3Y2dXLOzEomlRdRWVo4ZIAAmBYrar/x9auYOjH6862/32p57nDysvmY41X5JZv3SFdfv2VaNNPzJDvc5ufLD7zFvNoKfvCJcykvLuBj583EGMP1977KS3tb6esPU1LotX8ROaQBQuVcIBTmnWNdfOHSuQDMrinn3RNDB4iG5h4qigsG9RqGM58inVw+lxqfMtXCfvvaQX7+4kGOdPRSXVZIKBLJ+DzpJNYsvB7B64Gff+YSyotPfhyLCF9buZDV973Ob197l5svO/3ULmyYNMWkcm7vsR76w4Zz6ioBmFtTzrut/iEf19Dcw+m1FYiczMPesWIBpUnfngo8Mqy87B0rFpCU4s04N0O5z21Xz085VuAR+vrDfPPxtwdqDW3+frr7wlxz9tSU9yfApy44zfL5k2sWoYjBGGHb4Y6Ucy+cO5nLz5jCT5/fT2dv/yle2fBogFA5t72pA4DFM6MBYvbkco509tJnMUIjUUNzD/OSRjqtWlrH3defQ11VKQIUF3go8MAVC2qzbteKRdPwSLTwBzCxpCDj3AzlPrNqou+/6rJChJO1sCkWtTADbG/sGvT+nDaxhIklBTzw5nu0+YIpj7GqWQTDkbQ1i6+uXEBnbz/3vbT/VC9tWDTFpHJuZ1MnlaWFzKyOdrNn15RhDBw64WfBtAmWj+nq66e5O8C82tShsKuW1g18iL99pIsP/+Rl7n1xP3deszCrdr24t4VQBH7z1+/j64/tYMHUCRoc1CAb9rUiAs/d9gGqy4sGjmeqhSW+PwG2He7gEz9/jRt//iq+YJijHX3MqCrlH66en3XNYtGMSq49dwa/2vAun7toNrUTSwbd7/SwbQ0QypZs3ojbGztZPLNyIFU0p6YciI5kShcgGpp7ACwDRKKzZkzkY0vq+M9XDvK5i2cxvdJ+/WDdzqNUlRVywZxJnD+rmpf2tmCMGZTSUu72SkMrZ8+oHBQcILv61bn1VdxwXh0PvHl44FhTRy+3P7w97e/NVLO47UNn8N/bjnDFD17AHwwP/P0Bji+prykmNaRsxnoHQmH2Hu/m7Fj9AaJFaiBjodpugAC49eozMAZ+/Mw+29cQDEV4dnczV585lQKvh2WzJtHaE+TQiaFrI8odegIh3nqvnUvn16TcZ1ULy1S/emlva8oxA5QXeSktHPyxO1QdbMt7HXg8gi8YHvj7++oj2/nG2h2OD9vWAKGGlM1Y7z3HuukPGxYnBIiJJYXUVBRlnCy3v7mHIq+H+uqhewT1k8r4zEWzeHjzYfYd77Z1Da/ub6U7EGLl2dMAOH9WNQCbDrXberwa/948eIJQxHDpvNQAkVwLG2ptsXQpI38wzN3XL7b9PBD9+wtHzKBjwXCEnoB1TS+Xw7Y1xaSGlM3Y8O2N0RnUiT0IiBaqD2QIEA3NPcypKafAa+87yy1XzOOhjYe5Z/0efvHZZUOev27nMSqKC7gk9sc/v7aCiSUFbD7UxsfPn2nrd6rx7eV9rRQXeAa+PCRLrjVkkikllc3zQPYf+Lkctq09CDWkdG84q+M7mzqpLjtZoI6bXVOesQfR0NJjK70UN6m8iMvOqOGZt48z584/ccn3nku7vEE4Ynj67eNcsbB2YMKRxyOcN6uazdqDUDGvNLSyfM6knExKyzYllUm6v7+q0sKc/Y50NECoIVm92UsKrNeI2d7Yydl1lSmF3zk15TR3B/AFQimP6esPc7jNz+lZBIi1W5p49p1mgCHrIm8ebKPNF+SaWHopbtmsavYe76HTPzpjzFX+aO7qY+/xHsv00nBkm5LKJF2w+fa1i3L2O9LRFJMa0qqldYQjEW5LGIVx+RlTUt6Iff3RAvUXF85NeY7EkUzJ6aeDrT4ixl6BOm7N+j309Q+eyRqviyS3a/2uYxQXeLg8ti5U3HmxVMJb77VzxcLs51Wo8WNDQ7SofEmOAgRkl5Ia6nmAtKMInRyqrQFC2bJ8zmQAvn/DOTy18xhbGzsIhSODagbvHOsmFDk5gzrR7MknRzIlB4iBEUwZlgNPZrcuEokY1u08xmVnTBm0lAHAkvoqvB5h06E2DRAut6GhlUnlRZw1feJoN8VSroJNtjTFpGw53B4dDjqzuoxPLT+N412BgRRPXHyJ73NmVqU8fnZNGWC97HdDcw8iMHdKue32pMvLTk2aSLStsYNjXX0p6SWAsqICFs2YqHUIlzPGsGFfKxefPhlP8losLqcBQtnS2B79Zj6zupQrF9YybWIJ97/x3qBzdjR2MKm8aNBWo3FlRQVMm1jCQYs1mRpaeqivLsuqOGiVl43+Hi/94ZOpp3W7jlHgEa5aONXyec6fVc3Wwx2DHqPcpaG5h+buQM7qD+OJowFCRFaKyB4RaRCROy3u/5GIbI39t1dEOhLuu0dEdonIbhH5V9HprqOqqb0XEZheWUqB18Pq5fW8tLeF9xImmu1o6uIciwJ13OyaMg629qQc39+c3QgmsC4CfubC0zjQ6uO7f9oNRL8Zrtt5jItOn0xlWaHl85w/q5q+/ghvH+nK6ver8SNef7CaIOd2jtUgRMQL/BS4GmgENorIE8aYt+PnGGNuTTj/y8DS2M8XA5cAi2N3bwAuB15wqr1OGg/bXDa29zJ1QsnAvtKr33caP3mugf968z3uvGbhQIH6qgy5/Dk15azfdXzQsXDEcKDVN7CxUDas8rJFBV7+Y8NB+sNhnnm7mebuAJ3+ftZuabJ8zZfNmgTA5kPtnFtflXUbcmE8vD9GSrrXKtvjiTbsa2X25DJmVpeN0lXlLyeL1MuBBmPMAQAReRC4Dng7zfk3Ad+K/WyAEqAIEKAQOJ7mcXktvkyFk+uljITGdv+guQ3TKku4amEtD286zK1Xz2f30S7CEcM5M1ML1HGzJ5fT5gvS2dtPZWnhwPMGQxFOz6L+kMld1yzkhT3N3P/GyXVwOnr7077m0ypLqKsqZfOh9kE72o2U8fL+GAnpXqtNh9r4w+Ym28fh5GvbH47w+oETfOw8fa2tOJliqgMOJ9xujB1LISKzgDnAcwDGmNeA54Gjsf/WG2N2O9hWx4yXbS4b23tTJr99+sJZnPAFWb/r+MkCtcUIprj4UNfEQnU2azDZUeD14AumLkGQ6TVfNruaTYfaMMZY3u+k8fL+GAnpXqv7X38vq+OJr+3Wwx34gmGtP6SRL0Xq1cAjxpgwgIjMA84EZhINKleKyPuTHyQiN4vIJhHZ1NLSMqINtms8bHMZCkc41tWX0gV//7wa6ieVcv/rh9jR2ElNRRHTLQrUcYlzIeJODnG1XuV1OI539lkeT/eanz+rmuNdgYFC/EgaD++PkWCMSbtUdrqwnu544mu7YV8rHoGL5mqAsOJkiqkJqE+4PTN2zMpq4JaE2x8DXjfG9ACIyFPARcDLiQ8yxtwH3AewbNmykf/6Z8NwtrnMt5z0sa4+whFDXVIPwuMRzp1ZxR+3H+WNg20UF3h4fOuRtG2tn1SGSGqAqKkoTltEHo5sX/PzEybM1U869Ty03Xz4hxdPw+ORlIXYMrXVDZJfp89eNCtlSHUirwhhi95fuuOJ24c2dfRS6BWe39OsKT0LTvYgNgLzRWSOiBQRDQJPJJ8kIguBauC1hMPvAZeLSIGIFBItUI/JFNMdKxZQ6B08qifTeinZLK09UhKHuCZau6WJP+8+WRoKhCIZ21pS6GVGZemgZb+jazDlpv4Ql+06OAunTaSiuIBN7576fIh0/37fWLsj5fh9Lx2krNAzUPi309bxzur1u/upd9jR2MGN75tpuVT2TRfUW/57Wx1P3j4UoD9sRv1vLF85FiCMMSHgS8B6oh/uDxljdonId0Tk2oRTVwMPmsEJ4EeA/cAOYBuwzRjz30611UmrltbxwTNPjsEfar2UfMxJnwwQg79dZ1ruIp25U8oHehDGmOg2ozmqP8Rluw6O1yMsPa0qJ0t/Z5MnB5hQUsg9N0SXf4boiIzvXLfItd9mrV4/gMqyIr5/w7mWS2X/n1XnWP57Wx1Pt33oaP+N5StHl9owxjwJPJl07JtJt79t8bgw8EUn2zaSEmf3rr3lEss3aFw+5qSbYgFiRtXg+sJw2jp7cjlrtzZhjKGlO0B3XyirJTbsynZpgvNOq+Ynz+2ju6+fCSXDT3elu/Z0+c+jnX0DbX1hTzOf/8+NTErazcxN0r1+8bpSun/XbI5n2j5UDaZrMY2AxM3LdzZ1Zlz3J13+vLKskMfeauQHT+8d8dpEY7uf2gnFFBcM7q4Pp74yu6ac7r4Qbb5gwgim3BWohysQChMxcM63n6buFF7bdK9Junx44mt18ek1TCgp4Kmdx7gqoddp5VTG/eeLxLZOryrh4rmT056by5rMcN63bpUvo5jGtTZfkDOmViByckOddKxqFiLQ4e/ntoe3jUptwmqIa7yt2a5HPye+JtMJHw0tuR3iOlxrtzTx61ffHbh9Kq/tHSsW4JXUmlO6PHnia1VU4OGDZ07lz7uPZ1z6I5s6R77m1pOv4UhHH4+81cTUCcUUO1yTyeVeDeOdBogR0OYLUl9dxpya8oH5AumsWlrHRbFvUvG86Q8/fi5VpYUkD3YZqbxpU0ev5SzT4ax5P6cmGgwOtPhoaO6horiAqRPTp9xGwnBqKelce+4MSgo9lBZ6beXJk1+rFYum0eHv582DbRnba1Xn+J2Ncf/5Il2twesVvn9DdltyZiuXezWMd5piGgFtviCLZkxkQkkBrx9I/4cf19nbzwVzJvH7L140cOwfHt5mea7TedNwxHCko5cPL55ueX+2uf6Z1aV4PRLtQTT3cHptRdq1m0ZKLus+e4534wuG+cEnzk3ZytTOa3X5GVMoKfSwbuextHsTZNuufMytp3/N+7J+Tw3HaC2fPdZoD8Jhxhja/EEmlRdxdl0lx7r6aOkOpD2/Nxhm15Euls0evC9uNtt+5tLxrj5CEWOZYhqOQq+H+upS3m31R0cwOVCgzlYuX9sN++Ibz6TPp2dSWuTlA2fUsn7XMSIW8yMAatP0uJJTW3H5mFsfrfezyo4GCIf5gmGCoQiTyosGlqHYmSHNtK2xg1DEpGycnm556y9enrp7Wy6lG+J6KmbXlLO9qYPm7sCo1x/A+rUtSrOl6lA2NLRy+pRyplcO/4Nu5dnTaO4OsOVwh+X9cyanzhtJV+fwCNx29fxht8Up2c4PUqNDA4TD2mMjmKrLi1hUV4kIGesQ8c1rzjttcIBIzptOmVBMgQf+uP2oo3sZNHXENwrK3Te7OTXlHG6LBp58CBDJr61HYEZlCdctmZHV8wRCYd482Mb752e/Mm2iKxbWUugV1u86lnJfQ3MPb77bxuXza4Yc9x+vW71zPHWJ9dG2amkdC6dNwCNoHSCPaQ3CYSdiAWJyeREVxQXMqSnPOJJp86F25tVWUFWWOhY+OW/6+NYmvvLgVv75yd1866OLct94oDH2QV6Xw65/fE0myI8AAYNf2wfefI+7Ht3Bn3c3c/VZmYebJtryXge9/eFT3te4srSQi0+vYd3OY9x1zcJBNZp/eXoPpYVefnjjEiZXpKaakt8j33x8J/e9dIAzp0/gY0tnppw/WvzBEPuae/jMhbP4x+vOHu3mqDQ0QDgssQcBsLiuMm2hOhIxbD7Ubrk9ppXrltSx7XAnv3rlIGu3NNHh77c99t3uePnG9l5qKoqz2u1tKIkFyk//8nW+umJhXn1z/MT5M/nFywe4Z907XLFgyqB9tzPZsK8Vr0e4YO6kU27DNWdP485Hd/D20S4WzYimJrcd7uCpncf4ylXzLYODlf/9kbPYc6yb2x/axj8/+Q6t3YGc7aNwKl7a20Jff4QVNt/ranRoislhiT0IIGOh+kBrD529/ZyXVH/IZNGMaDe93d9ve+x7Nus9RYe45q73sHZLE//5yrsDt4909OXdWP0Cr4evrljAvuYeHn3Lfrs2NLRy7sxKJp7CTOy4D541FY/A+p0n00xr1u9hUnkR/+P99vetKPR6+Oi504kYaOkODPx73/nodu56dDt3Prp90Pvgzke389VHtqUcz/W/0bqdx6guK2T57FMPpso5GiAcltyDyFSoji8Wl1ygzuSHz+zLen5ENus9JW8UdKrWrN9DIJSbOQdOWrFoGkvqq/jhM3vpsxivn6yzt5/tjR0521egpqKY982exLpYHeKVhlY2NLRyyxXzsl4K5N4XDqQs9dHXH+GBNw+nzP/o64/w0KbGnM0LsRIMRXh2dzMfPHOq7d6ZGh36r+OwE74ghV5hQnE0m5epUL35UDvVZYXMrbG/uulwxvDbfUwkEl2DP3mZ71ORj2tNWRER7rxmIce6+gbNsk7n9QMniBi49BQL1IlWnj2Nvcd72N/Swz3r3mFGZQmfvuC0rJ8nV6/tUM+zdksTl3zvOebc+Scu+d5zaXscr+5vpTsQYqWml/KeBgiHtfuCVJcVDRQa44XqdAHi/FnVWU0cG8548vJi63pC8mOauwP0h01Oh7iOpfHvF86dzFnTJ/D9p94Z8kNvw75Wyoq8LHFgX+ur/uVFtjV2ctmCKcOqBaV7bdPNm0h3fFqGzaCySVuu33WM8iLvKRfzlfM0QDjshC+Ysjrn4rpKdiSNZGrzBTnQ6uP8WdnlZNPNj7g4zUStx7c20RMI4/UMPQbdiSGuY2kdnLVbmtjf4sPAkB96rzS0csGcSSl7O5zK775n3Z6UY8NdH8rufgnpjgNMnVicdltWu2nLcMTwzNvHuWJhbU4HPihnaIBwWJsvkBIgrArV8fkP2dQfIHUM/4yqEs6cNoHH3mrijQMnBp2760gnX/vDdpbPmcQ9N5zDjNg3wvJir+UY9PgkufocBoixtA6O3XpJU0cvB1p9Of1GbPWB29cfGVYdIN1rns0+Ch9dPJ2thzv52YsHLH+H3dTh5kPttPYENb00RugwV4e1+/tZNGPwB2xioTq+9PfmQ+0UeoXFMyuz/h3JY987e/v52L+/wv+8/y0ev+US6ieV0eYLcvNvN1NdVsS/f/o8aiqKueH8ej79y9c50RNMO8QVcp/+GSvr4Nj90HulIbq8xqlOkBvO77brVPdRMMYQAe5Z/w4dvUH+uO3owBDYj5473fbWqet2HqOowMMHFqRf8l7lD+1BOOxET2BgiGucVaF686E2Fs2ozEm3u7K0kF9+dhn94Qif/NmrXHT3s5z3T8/Q1NHLTcvrqUkYQ3/JvBreOdZNc3dfyvM0tvuZXF5EWZE7v0ekC4zTkzZO2rCvlZqKYs6YmrtJf/lWqxER1nx8MdMmFPPzFw8MqjX87MUDllunFnplUOrQGMP6Xce4bH4NFcXufE+NNRogHNQfjtDVFxoY4hqXXKgOhiJsa+xkWZbppUzmTqngUxecxtGuAEc7T3743/vCgUF57PfPi37rfbXhRMpzpNsHwi3S1XcWTZ848HMkYniloZVL503O6aq0+VirKSsqIN2iLolbpwpQUuAhFDaDCts7m7po6ujlQ4s0vTRWaIBwULt/8CS5RIvrKgfmQuw80kkwFMm6/jCUP247mnIsOYe+aMZEqsoKeTm2CmmipvbcDnEda6xy9xfNncQzu5tZF5vAtud4Nyd8wZyPyMnXWk1zl/VKxPGtU1+580oOfu/DbPzGB5k7pZxb7n9rYPe2dbuO4vXIoD3aVX7Tfp6D2n39ACk9CIgWqtduPUJLd4C3hlmgHoqdPLbHI1xyeg0bGlowxgx8C45EDI0dvXwwi7WIxqPkXHwgFObGn7/ObQ9tZV7tJQP1h0vn537IZj7Wauxu1zmhpJD7PruM6/7tFW782WtEjOFIZx/FBR5e2tuSd9elrGkPwkEnfNFvW1ab0CcWqje92079pFJqJ6YfZz4cdvPYl86v4XhXgP0tJ1f9bPUFCIYirk4xWSku8HLvX55HaZGXm37x+sBQ1I/f+1peLRfilGxSX6dPqeDG99XT2NHLkViaMxCK5N3SKio9DRAOivcgrAJEYqF683vtLMty/oMddv+Y48tDJKaZTu4DoQEi2fTKUla/r56W7iDB2FLr+bz/cy5lm/patzN1yfJ8XFpFWdMUk4PaMvQg4oXqJ3ccpaU7kNUCfXbF/2iHWpWzflIZsyaX8UpDK391SXQhuHiAqKvK3Szq8eSxLUdSjsU/+MZ7+iSb1NdYWVpFWdMA4aC2eA3CYm8HiBaq126NftDkcgRTIrt/zJfOq+HxrUfoD0co9HpobI/OonZzkToT/eCzx27NQuUnTTE5qM0XYGJJAYU2Vqz8wm82jmp64tJ5NfQEQmyNbXPZ1N5LdVmhjldPI9/mKeSrfByuq+zTAOGgNn+/ZXoJouvqPJmQnx3tfREuPr0GkeikL4jPgdD0Ujr6wWdPvg7XVfbo10MHWa3DFLdm/R6Cadb5GY0/nsqyQhbXVbKhoZVbrz6DxnY/82snjHg7xgq79R2Vn8N1lT0aIBx0oieYdhRQPuawL51fw89ePEBXXz9NHb1coevlZKQffGq80xSTg9r9qUt9x+VjDvvSeVMIRwxPbj9KX7/OgVDK7TRAOMQYQ5svaDmLGvIzh33erCpKC708uPEwgNYglHI5TTE5pCcQoj9sLNdhgvzMYRcXeFk+ZxIv7m0BdIirUm6nASJLa7c02fpQb/NFF+pLNwcC8jOHXVVaOPDzX/96I19buTDv2qiUGhkaILIQ33c3vtNXfHkFIOVDNB4gJlekDxD5Zu2WJtbtOjn09mhnX9rrU0qNf1qDyILdfXfhZICYVF6ccl++srvFplLKHTRAZCGboakDASJDiinf5OPQW6XU6NEAkYVshqYOBIgxlGLKx6G3SqnRowEiC9kMTW3zBynyeigvOvU9pkdKPg69VUqNHi1SZyFeqL394W2EIobqskK+9dFF1qOYeqKT5HK5T7HT8nHorVJq9GiAyNKqpXX8+M97efeEn09dcFraD892f/pJcvksH4feKqVGh6aYhsEXjI5k2ne8J+05J3zBtJPklFJqLHA0QIjIShHZIyINInKnxf0/EpGtsf/2ikhHwn2nicjTIrJbRN4WkdlOtjUb/kAIgIaW9AGiPcMyG0opNRY4lmISES/wU+BqoBHYKCJPGGPejp9jjLk14fwvA0sTnuK3wHeNMc+ISAUweID+KIlEDL5gGK9HOHTCTzAUoaggNc5qD0IpNdY52YNYDjQYYw4YY4LAg8B1Gc6/CXgAQETOAgqMMc8AGGN6jDF+B9tqW3yi3BlTJxCOGA6d8KWcEwxF6O4LZVxmQyml8p2TAaIOOJxwuzF2LIWIzALmAM/FDp0BdIjIoyKyRUTWxHokyY+7WUQ2icimlpaWHDffmi8YTS8tqa8EYF9zapqpwz/25kAopVSyfClSrwYeMcbE17EoAN4P3A68D5gLfD75QcaY+4wxy4wxy6ZMmTIiDfUHok08uy4aIBosAsSJMTiLWimlkjkZIJqA+oTbM2PHrKwmll6KaQS2xtJTIWAtcJ4TjcxWvAdRU1FMXVWpZYBoH1iHSQOEUmrscjJAbATmi8gcESkiGgSeSD5JRBYC1cBrSY+tEpF4t+BK4O3kx44Gf2yIa3lRAfOnVmTuQWiAUEqNYUMGCBH5qIhkHUhi3/y/BKwHdgMPGWN2ich3ROTahFNXAw8aY0zCY8NE00vPisgOQIBfZNsGJ/hiQ1zLir3Mm1LB/pYewhEz6Jx2vwYIpdTYZ2eY643Aj0XkD8CvjDHv2H1yY8yTwJNJx76ZdPvbaR77DLDY7u8aKYk9iHm1FQRCEZraezlt8sntOU/0xDcLKrR8DqWUGguG7BkYY/6S6PyE/cCvReS12OihCY63Lg8N9CCKvMyfWgFAQ0v3oHPa/UEqSwsp8ObLGACllMqerU8wY0wX8AjRuQzTgY8Bb8Umt7nKQA+iuIB5U6IxMrkOoZPklFLjgZ0axLUi8hjwAlAILDfGXAOcC9zmbPPyT3wUU1mRl8qyQmoqilPWZNJlNpRS44GdGsQNwI+MMS8lHjTG+EXkC840K3/5AiG8HqE4trzGvNrylDWZ2nxB6ieVWT1cKaXGDDsppm8Db8ZviEhpfOE8Y8yzzjQrf/kCYcqKvAP7PMyvnUBDcw8Jg7Bo8wV1kpxSasyzEyAeZvBCeeHYMVfyB0OUF53seM2rraC7L0RLdwAAYwzt/qAus6GUGvPsBIiC2GJ7AMR+du2nny8Yprz45LJQ82pjI5lihequvhD9YaM9CKXUmGcnQLQkTmwTkeuAVuealN/8gRDlxYN7EHBy0T5dZkMpNV7YKVL/LXC/iPwb0RnNh4HPOtqqPOYLRmsQcbUTiplQUjDQg9BlNpRS48WQAcIYsx+4MLZpD8aY9NuouYA/GGLqhJKB2yLCvNqTazJpD0IpNV7Y2lFORD4MLAJK4qN3jDHfcbBdecsfCFNWM/hlmzelghf2RvejaNMAoZQaJ+xMlPsZ0fWYvkw0xfQJYJbD7cpbvmCI8qLBexfNq62gpTtAp7+fNl2oTyk1TtgpUl9sjPks0G6M+UfgIqI7vrmSPxCmrGhwDyJxTaY2X5CiAs+gOoVSSo1FdgJEX+z/fhGZAfQTXY/JdYwx0R5EcVIPImFNprbYOkzxVJxSSo1VdmoQ/y0iVcAa4C3AkCd7M4y0vv4IEUNKD6KuupTiAs9AgKjWORBKqXEgY4CIbRT0rDGmA/iDiPwRKDHGdI5E4/JNfKG+5B6E1yOcPqWCfc09dPj7mayzqJVS40DGFJMxJgL8NOF2wK3BAaL1B0jtQQADQ13bfEEtUCulxgU7NYhnReQG0aT6QA+ioji1AD2vtoLG9l6Od/VpikkpNS7YCRBfJLo4X0BEukSkW0S6HG5XXvIP7AVh3YMACIQiulmQUmpcsDOT2pVbi1rxBeK7yaX2IObHAgSgmwUppcaFIQOEiFxmdTx5AyE3yNSDmDW5HK9HCEeM9iCUUuOCnWGudyT8XAIsBzYDVzrSojw20IOwCBBP7jhKvEjzvx/fSSAUYdXSuhFsnVJK5ZadFNNHE2+LSD3wY6calM8GehBJKaa1W5q469EdhCLRXeVae4Lc9egOAA0SSqkxy06ROlkjcGauGzIW+ILWPYg16/fQ2x8edKy3P8ya9XtGrG1KKZVrdmoQPyE6exqiAWUJ0RnVruMLhBCBksLBcfVIR6/l+emOK6XUWGCnBrEp4ecQ8IAx5hWH2pPXfIEw5UUFKesszagqpckiGMyoKh2ppimlVM7ZCRCPAH3GmDCAiHhFpMwY43e2afnHHwxZrtJ6x4oF3PXojkFpptJCL3esWDCSzVNKqZyyNZMaSPwqXAr82Znm5DdfMDxoP+q4VUvruPv6c6irKkWAuqpS7r7+HC1QK6XGNDs9iJLEbUaNMT0iUuZgm/KWP2Ddg4BokNCAoJQaT+z0IHwicl78hoicD7iy+hrdC8LWLq1KKTXm2fm0+3vgYRE5QnTL0WlEtyB1HX8wrLOklVKuYWei3EYRWQjEK657jDH9zjYrP/kCIeonuTK7ppRyoSFTTCJyC1BujNlpjNkJVIjI3znftPzjD4Yp172mlVIuYacG8TexHeUAMMa0A3/jWIvymC8QslyoTymlxiM7AcKbuFmQiHgB1yXijTHRHoTFUt9KKTUe2fk6vA74vYj8PHb7i8BTzjUpPwVCEUIRoz0IpZRr2Pm0+xpwM/C3sdvbiY5kchX/wEJ92oNQSrnDkCkmY0wEeAN4l+heEFcCu51tVv7xBeJLfWsPQinlDmk/7UTkDOCm2H+twO8BjDFXjEzT8os/zVLfSik1XmXqQbxDtLfwEWPMpcaYnwDhDOenEJGVIrJHRBpE5E6L+38kIltj/+0VkY6k+yeKSKOI/Fs2v9cJvjSbBSml1HiV6evw9cBq4HkRWQc8CEiG8weJjXb6KXA10U2GNorIE8aYt+PnGGNuTTj/y8DSpKf5JyAv9r72Z9huVCmlxqO0PQhjzFpjzGpgIfA80SU3akXkXhH5kI3nXg40GGMOGGOCRAPMdRnOvwl4IH4jtubTVOBpG7/LcfEehA5zVUq5hZ0itc8Y81+xvalnAluIjmwaSh1wOOF2Y+xYChGZBcwBnovd9gD/Atye6ReIyM0isklENrW0tNho0vDF96PWHoRSyi2y2pPaGNNujLnPGHNVjtuxGngkvikR8HfAk8aYxiHac58xZpkxZtmUKVNy3KTBfLEUk9YglFJu4eTX4SagPuH2zNgxK6uBWxJuXwS8P7bmUwVQJCI9xpiUQvdI0R6EUsptnPy02wjMF5E5RAPDauBTySfFVoqtBl6LHzPGfDrh/s8Dy0YzOMDJHkRpofYglFLukFWKKRvGmBDwJWA90Yl1DxljdonId0Tk2oRTVwMPGmOMU23JBV9sNzmPx/ZALqWUGtMczZcYY54Enkw69s2k298e4jl+Dfw6x03Lmi8Y1nWYlFKu4lgPYrzxB0M6xFUp5SoaIGzyBbQHoZRyFw0QNvmDIV3JVSnlKhogbPIFw7qSq1LKVTRA2OQPhKjQGoRSykU0QNjk11FMSimX0QBhk09rEEopl9EAYZM/oDUIpZS7aICwIRiKEAxHtAehlHIVDRA2xBfq0xqEUspNNEDY4IvvR62jmJRSLqIBwgZ/QHsQSin30QBhg/YglFJupAHCBu1BKKXcSAOEDQM9CA0QSikX0QBhw8AoJk0xKaVcRAOEDfHtRit0opxSykU0QNhwch6E9iCUUu6hAcKGeA9Ci9RKKTfRAGGDPxiipNCD1yOj3RSllBoxGiBs6AmEdASTUsp1NEDY4A+GdQSTUsp1NEDY4NMehFLKhTRA2BDdTU57EEopd9EAYYMvGKJc50AopVxGA4QN/oD2IJRS7qMBwoboftTag1BKuYsGCBt0FJNSyo00QNjgC2gNQinlPhoghhAKRwiEIppiUkq5jgaIIcT3gtAitVLKbTRADCG+kqummJRSbqMBYggnV3LVHoRSyl00QAxhoAehNQillMtogBjCQA9Ch7kqpVxGA8QQtAehlHIrDRBDiI9iKtcehFLKZTRADMEfiO9HrT0IpZS7aIAYwkAPQgOEUsplHA0QIrJSRPaISIOI3Glx/49EZGvsv70i0hE7vkREXhORXSKyXURudLKdmQz0IDTFpJRyGce+FouIF/gpcDXQCGwUkSeMMW/HzzHG3Jpw/peBpbGbfuCzxph9IjID2Cwi640xHU61Nx1fMExRgYdCr3a2lFLu4uSn3nKgwRhzwBgTBB4Erstw/k3AAwDGmL3GmH2xn48AzcAUB9uaVnS7Ue09KKXcx8kAUQccTrjdGDuWQkRmAXOA5yzuWw4UAfst7rtZRDaJyKaWlpacNDqZLxjSArVSypXyJW+yGnjEGBNOPCgi04H/B/yVMSaS/CBjzH3GmGXGmGVTpjjTwfAHwjrEVSnlSk4GiCagPuH2zNgxK6uJpZfiRGQi8CfgfxljXnekhTZoD0Ip5VZOBoiNwHwRmSMiRUSDwBPJJ4nIQqAaeC3hWBHwGPBbY8wjDrZxSP6g9iCUUu7kWIAwxoSALwHrgd3AQ8aYXSLyHRG5NuHU1cCDxhiTcOyTwGXA5xOGwS5xqq2Z+ALag1BKuZOjn3zGmCeBJ5OOfTPp9rctHvc74HdOts0ufzCso5iUUq6UL0XqvOUPhijTzYKUUi6kAWIIvoD2IJRS7qQBIoNwxNDbH9YahFLKlTRAZNDbH52WUaEpJqWUC2mAyMCnC/UppVxMA0QG8QChS30rpdzI9Z98a7c0sWb9Ho509DKjqpQ7Vixg1dLoklH+2F4QZVqkVkq5kKsDxNotTdz16I6BWkNTRy93PboDgFVL6072ILQGoZRyIVenmNas3zMQHOJ6+8OsWb8H0B6EUsrdXB0gjnT0ZjzuC2oPQinlXq4OEDOqSjMe9we0B6GUci9XB4g7ViygtHDwh39poZc7ViwAEnoQOopJKeVCrv7ki49WWrN+D02xtNLnL56dOopJ50EopVzI1QECokFi1dI6AqEwV/7gRV7Z34oxBhHBFwhR4BGKvK7uaCmlXEo/+WKKC7z8/Qfns72xk3U7jwHRHkRZkRcRGeXWKaXUyNMAkeD682Yyv7aCNU/vIRSO0BMI6TpMSinX0gCRwOsRbl+xgAMtPv7wVqPuBaGUcjUNEEk+dNZUltRX8eM/76PNF9S9IJRSrqUBIomI8NWVCzja2cfrB9rY1tjJJd97jrVbmka7aUopNaI0QFho7grgSahLx9do0iChlHITDRAW1qzfQ8QMPpa4RpNSSrmBBggLQ63RpJRSbqABwsJQazQppZQbaICwMNQaTUop5QY6yN9C4hpNVjvNKaWUG2iASCO+RpNSSrmVppiUUkpZ0gChlFLKkgYIpZRSljRAKKWUsqQBQimllCUxxgx91hggIi3AoSFOqwFaR6A5+cit167X7S563dmbZYyZYnXHuAkQdojIJmPMstFux2hw67XrdbuLXnduaYpJKaWUJQ0QSimlLLktQNw32g0YRW69dr1ud9HrziFX1SCUUkrZ57YehFJKKZs0QCillLLkmgAhIitFZI+INIjInaPdHqeIyK9EpFlEdiYcmyQiz4jIvtj/q0ezjU4QkXoReV5E3haRXSLyldjxcX3tIlIiIm+KyLbYdf9j7PgcEXkj9n7/vYgUjXZbnSAiXhHZIiJ/jN12y3W/KyI7RGSriGyKHcv5e90VAUJEvMBPgWuAs4CbROSs0W2VY34NrEw6difwrDFmPvBs7PZ4EwJuM8acBVwI3BL7Nx7v1x4ArjTGnAssAVaKyIXA94EfGWPmAe3AF0aviY76CrA74bZbrhvgCmPMkoT5Dzl/r7siQADLgQZjzAFjTBB4ELhulNvkCGPMS0Bb0uHrgN/Efv4NsGok2zQSjDFHjTFvxX7uJvqhUcc4v3YT1RO7WRj7zwBXAo/Ejo+76wYQkZnAh4Ffxm4LLrjuDHL+XndLgKgDDifcbowdc4upxpijsZ+PAVNHszFOE5HZwFLgDVxw7bE0y1agGXgG2A90GGNCsVPG6/v9x8BXgUjs9mTccd0Q/RLwtIhsFpGbY8dy/l7XHeVcxhhjRGTcjm0WkQrgD8DfG2O6ol8qo8brtRtjwsASEakCHgMWjm6LnCciHwGajTGbReQDo9yc0XCpMaZJRGqBZ0TkncQ7c/Ved0sPogmoT7g9M3bMLY6LyHSA2P+bR7k9jhCRQqLB4X5jzKOxw664dgBjTAfwPHARUCUi8S+A4/H9fglwrYi8SzRlfCXwfxn/1w2AMaYp9v9mol8KluPAe90tAWIjMD82wqEIWA08McptGklPAJ+L/fw54PFRbIsjYvnn/wB2G2N+mHDXuL52EZkS6zkgIqXA1UTrL88DH4+dNu6u2xhzlzFmpjFmNtG/5+eMMZ9mnF83gIiUi8iE+M/Ah4CdOPBed81MahH5C6I5Sy/wK2PMd0e3Rc4QkQeADxBd/vc48C1gLfAQcBrRJdE/aYxJLmSPaSJyKfAysIOTOemvE61DjNtrF5HFRAuSXqJf+B4yxnxHROYS/WY9CdgC/KUxJjB6LXVOLMV0uzHmI2647tg1Pha7WQD8lzHmuyIymRy/110TIJRSSmXHLSkmpZRSWdIAoZRSypIGCKWUUpY0QCillLKkAUIppZQlDRBKOUhEehJ+/gsR2Ssis0azTUrZpUttKDUCROQq4F+BFcaYQ6PdHqXs0AChlMNE5DLgF8BfGGP2j3Z7lLJLJ8op5SAR6Qe6gQ8YY7aPdnuUyobWIJRyVj/wKuN74xo1TmmAUMpZEeCTwHIR+fpoN0apbGgNQimHGWP8IvJh4GUROW6M+Y/RbpNSdmiAUGoEGGPaRGQl8JKItBhj3LTcvBqjtEitlFLKktYglFJKWdIAoZRSypIGCKWUUpY0QCillLKkAUIppZQlDRBKKaUsaYBQSill6f8D9CC5mbAY5tMAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(6,4))\n",
    "plt.plot(range(1,51),knn_grid.cv_results_['mean_test_score'],marker='o')\n",
    "plt.xlabel('K')\n",
    "plt.ylabel('Accuracy')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "knn_grid_pred = knn_grid.predict(scaled_X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8269230769230769"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy_score(y_test,knn_grid_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Naive Bayes\n",
    "\n",
    "Now try naive_bayes.MultinomialNB. How does its accuracy stack up? Hint: you'll need to use MinMaxScaler to get the features in the range MultinomialNB requires."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.preprocessing import MinMaxScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.762058371735791"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scaler = MinMaxScaler()\n",
    "\n",
    "minmax_X_train = scaler.fit_transform(X_train)\n",
    "minmax_X_test = scaler.transform(X_test)\n",
    "\n",
    "mnb = MultinomialNB()\n",
    "mnb_cv_scores = cross_val_score(mnb,minmax_X_train,y_train,cv=10)\n",
    "mnb_cv_scores.mean()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MultinomialNB()"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mnb.fit(minmax_X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8269230769230769"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy_score(y_test,mnb.predict(minmax_X_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Revisiting SVM\n",
    "\n",
    "svm.SVC may perform differently with different kernels. The choice of kernel is an example of a \"hyperparamter.\" Try the rbf, sigmoid, and poly kernels and see what the best-performing kernel is. Do we have a new winner?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "svc = SVC()\n",
    "param_grid = {'kernel':['linear','rbf','sigmoid','poly'],\n",
    "             'C':[0.01,0.1,0.5,1,5,10]}\n",
    "\n",
    "svc_grid = GridSearchCV(svc,param_grid)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(estimator=SVC(),\n",
       "             param_grid={'C': [0.01, 0.1, 0.5, 1, 5, 10],\n",
       "                         'kernel': ['linear', 'rbf', 'sigmoid', 'poly']})"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svc_grid.fit(scaled_X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(C=0.1, kernel='linear')"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svc_grid.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8413461538461539"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svc_grid_pred = svc_grid.predict(scaled_X_test)\n",
    "accuracy_score(y_test,svc_grid_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Answer:\n",
    "\n",
    "SVM with C=0.1 and linear kernel has so far the best performance. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Logistic Regression\n",
    "\n",
    "We've tried all these fancy techniques, but fundamentally this is just a binary classification problem. Try Logisitic Regression, which is a simple way to tackling this sort of thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "log = LogisticRegression(solver='saga',\n",
    "                               multi_class=\"ovr\",\n",
    "                               max_iter=1000000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "penalty = ['l1', 'l2']\n",
    "\n",
    "C = np.logspace(0, 4, 10)\n",
    "\n",
    "log_grid = GridSearchCV(log,param_grid={'C':C,'penalty':penalty},cv=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5,\n",
       "             estimator=LogisticRegression(max_iter=1000000, multi_class='ovr',\n",
       "                                          solver='saga'),\n",
       "             param_grid={'C': array([1.00000000e+00, 2.78255940e+00, 7.74263683e+00, 2.15443469e+01,\n",
       "       5.99484250e+01, 1.66810054e+02, 4.64158883e+02, 1.29154967e+03,\n",
       "       3.59381366e+03, 1.00000000e+04]),\n",
       "                         'penalty': ['l1', 'l2']})"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "log_grid.fit(scaled_X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(max_iter=1000000, multi_class='ovr', penalty='l1',\n",
       "                   solver='saga')"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "log_grid.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8365384615384616"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy_score(y_test,log_grid.predict(scaled_X_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Answer:\n",
    "\n",
    "The simple model has pretty good performance with max_iter=1000000, multi_class='ovr', penalty='l1', and solver='saga'."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Neural Networks\n",
    "\n",
    "As a bonus challenge, let's see if an artificial neural network can do even better. You can use Keras to set up a neural network with 1 binary output neuron and see how it performs. Don't be afraid to run a large number of epochs to train the model if necessary."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/tian/anaconda3/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:526: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint8 = np.dtype([(\"qint8\", np.int8, 1)])\n",
      "/Users/tian/anaconda3/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:527: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint8 = np.dtype([(\"quint8\", np.uint8, 1)])\n",
      "/Users/tian/anaconda3/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:528: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint16 = np.dtype([(\"qint16\", np.int16, 1)])\n",
      "/Users/tian/anaconda3/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:529: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint16 = np.dtype([(\"quint16\", np.uint16, 1)])\n",
      "/Users/tian/anaconda3/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:530: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint32 = np.dtype([(\"qint32\", np.int32, 1)])\n",
      "/Users/tian/anaconda3/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:535: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  np_resource = np.dtype([(\"resource\", np.ubyte, 1)])\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.layers import Dense\n",
    "from tensorflow.keras.models import Sequential\n",
    "\n",
    "def create_model():\n",
    "    model = Sequential()\n",
    "    # 4 feature inputs going into an 6-unit layer\n",
    "    model.add(Dense(6, input_dim=4, kernel_initializer='normal', activation='relu'))\n",
    "    # \"Deep learning\" turns out to be unnecessary - this additional hidden layer doesn't help either.\n",
    "    #model.add(Dense(4, kernel_initializer='normal', activation='relu'))\n",
    "    # Output layer with a binary classification (benign or malignant)\n",
    "    model.add(Dense(1, kernel_initializer='normal', activation='sigmoid'))\n",
    "    # Compile model; rmsprop seemed to work best\n",
    "    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /Users/tian/anaconda3/lib/python3.7/site-packages/tensorflow/python/ops/resource_variable_ops.py:435: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Colocations handled automatically by placer.\n",
      "WARNING:tensorflow:From /Users/tian/anaconda3/lib/python3.7/site-packages/tensorflow/python/ops/math_ops.py:3066: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.cast instead.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-03-21 00:51:29.211295: I tensorflow/core/platform/cpu_feature_guard.cc:141] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 FMA\n",
      "2022-03-21 00:51:29.211659: I tensorflow/core/common_runtime/process_util.cc:71] Creating new thread pool with default inter op setting: 4. Tune using inter_op_parallelism_threads for best performance.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.7830261170864106"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from tensorflow.keras.wrappers.scikit_learn import KerasClassifier\n",
    "\n",
    "# Wrap our Keras model in an estimator compatible with scikit_learn\n",
    "clf = KerasClassifier(build_fn=create_model, epochs=100, verbose=0)\n",
    "# Now we can use scikit_learn's cross_val_score to evaluate this model identically to the others\n",
    "clf_cv_scores = cross_val_score(clf, scaled_X_train, y_train, cv=10)\n",
    "clf_cv_scores.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tensorflow.python.keras.callbacks.History at 0x14256d9e8>"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.fit(scaled_X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf_pred = clf.predict(scaled_X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8269230769230769"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy_score(y_test,clf_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## Do we have a winner?\n",
    "\n",
    "Which model, and which choice of hyperparameters, performed the best? Feel free to share your results!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "### Answer:\n",
    "    \n",
    "It turns out that the **SVM** performed the best, which had an accuracy score of over 84%. The simple model, **logistic regression** had comparable performance!\n",
    "\n",
    "Hyperparamters of SVM\n",
    "\n",
    "SVC(C=0.1, kernel='linear')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
